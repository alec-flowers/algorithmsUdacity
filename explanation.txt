Problem 1 - Square Root of an Integer
Design Choices
The formula is :
x(n+1) = x(n) - f(x(n))/f'(x(n)) = 1/2 (x(n)+a/(x(n))). This is the arithmetic mean of x(n) and a/x(n). The basic idea being if x(n) > sqrt(a) then a/x(n) < sqrt(a) so the arithmetic mean will get us a better estimate. 

Time Complexity
N = range(1,number) - The brute force solution would be iterating starting from 1 up to the number and calculating the square. I would classify this as O(N) time.
O(log(N))

Space Complexity
O(1) - I do not create any additional data structures. I just have one variable x that I set the input to. 


Problem 2 - Search a Rotated Sorted Array
Design Choices
To search a normal sorted array in log n time you would use binary search which cuts your search space in half every iteration.
I knew then that this would just be a modified version of binary search. The trick here is to know where the pivot in the array is.
You can figure this out by checking if the first element in the array greater than the middle element. If so you know that the pivot
occured in the left part of the array and that the right side of the array is "sorted". 

Time Complexity
N = number of items in initial array
O(Log N)
Since we use binary search we cut the search space in half by a factor of 2. This is Log N time complexity. 

Space Complexity
O(1)
We don't create any additional data structures as we just keep track of indices in the arrray. 


Problem 3 - Rearrange Array Elements
Design Choices
The first way to solve this would be to sort the array and then fill in your numbers using the sorted array. I figured I could
speed up the time complexity since we know there is a limit [0, 9]. I can iterate through the array and count the frequencies of 
numbers and use this to create the two numbers to be summed. 

Time Complexity
N = number of elements in array
O(N)
I iterate through the array once to get the frequencies and then iterate through one more time to unwind the frequencies and turn
it into numbers. 

Space Complexity
N = number of elements in array
O(N)
I create one additional array to count the frequencies. 


Problem 4 - Dutch National Flag Problem
Design Choices
I keep track of where in the array I need to place the Os and 2s. Once you've sorted these the 1's are also sorted in the same place. 

Time Complexity
N = number of elements in array
O(N)
Iterate through the array one time. 

Space Complexity
O(1)
Modifing the array in place so no additional data structures are created.


Problem 5 - Autocomplete with Tries
Design Choices
Regarding the suffixes class - had to build this recursively in the TrieNode() class. The part I found difficult was how to pass through
the list of items that could possibly be suffixes. In python if I use a mutable default argument and mutate it, then I have the
mutated object for all future calls which messes up future suffix calls. I jumped around this by using a default call and checking for 
it with an if statement. 

Time Complexity
Building a Trie
m = length of longest word
n = total number of words
O(m*n)

Find
N = number of letters in word you are trying to find. 
O(n)
Finding it an item is in a node is O(1) time. We have to do this n times for each letter in the word. 

Insertion
n = number of letters in word you are trying to insert. 
O(N)
Worst case we have to insert a node for each letter. 

Suffixes 
N = nodes in the Trie
O(N)
At worst case we have to look up every node in the trie. 

Space Complexity
Trie Data Structure Itself
k = footprint of single node
n = number of nodes
O(k*n)

Find
O(1)
We are just searching our data structure and outputting the result. 

Insertion
N = letter in word to insert
O(N)
Worse case we have to add a new node for every element in the word to the trie. 

Suffixes
M = number of words in array
O(M)
Iterating through node saving the items in a list. List will be at its longest length M. 


Problem 6 - Max & Min in an unsorted Array
Design Choices
Iterated over the array with a tracker that compares each value against a max and min and swaps the value if it is a new max or min.

Time Complexity
N = number of items in array
O(N)
We have to check in the worst case every element in the array.

Space Complexity
O(1)
Created two ints to keep track of max and min but nothing else. 


Problem 7 - Request Routing in a Web Server with a Trie
Design Choices
Created a router with the a Trie being the datastructure that stored URL's and webpages to return. Adding a webpage URL required passing
the URL to the tire. Looking up a webpage requires using the Trie's find function. 

Time Complexity
Building a Trie
m = length of longest URL (depth of tree)
n = average length of a unique path
O(m*n)

Add Handler
N = number of pages betwee */  */
O(N)
Have to walk through every N to add a hangle into the Trie. Searching through the Trie takes O(1) time which we repeat N times. 

Lookup
N = number of pages betwee */  */
O(N)
Same thing for insert, except we are looking up the item at the end rather than inserting new nodes. 


Space Complexity
Trie Data Structure Itself
k = footprint of single node
n = number of nodes
O(k*n)

Add Handler
N = number of pages betwee */  */
O(N)
Adding N nodes into the Trie. 

Lookup
O(1)
Not adding any space, just looking up and returning the output. 